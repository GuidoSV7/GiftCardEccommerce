---
globs: *.tsx
alwaysApply: false
---
## ÔøΩÔøΩ Reglas de Desarrollo

### 1. **Servicios y API**
- ‚úÖ **SIEMPRE** revisar si existe un service con el nombre del componente
- ‚úÖ **SIEMPRE** crear el service correspondiente si no existe
- ‚úÖ **SIEMPRE** preparar la estructura para el backend futuro
- ‚úÖ **SIEMPRE** usar la instancia de Axios de `src/lib/axios.ts`

### 2. **Gesti√≥n de Estado**
- ‚úÖ **Zustand** para estado global (autenticaci√≥n, carrito, etc.)
- ‚úÖ **TanStack Query** para datos del servidor
- ‚úÖ **useState/useReducer** solo para estado local del componente

### 3. **Formularios**
- ‚úÖ **SIEMPRE** usar `react-hook-form`
- ‚úÖ **SIEMPRE** incluir validaci√≥n
- ‚úÖ **SIEMPRE** manejar errores con toast notifications

<### 4. **Manejo de Errores**
- ‚úÖ **SIEMPRE** usar try-catch en operaciones async
- ‚úÖ **SIEMPRE** mostrar errores con `toast.error()`
- ‚úÖ **SIEMPRE** manejar estados de loading



## üéØ Estructura de Componente Est√°ndar

### Para Vistas/Pages (Views)
```tsx
import { useForm } from "react-hook-form";
import { useNavigate } from "react-router-dom";
import { useMutation, useQuery } from "@tanstack/react-query";
import { toast } from "react-toastify";

import type { [ComponentName]FormData } from "../../types";
import { [actionName] } from "../../services/[serviceName]Service";
import [ComponentName]Form from '../../components/[path]/[ComponentName]Form';

export default function [ComponentName]View() {
    const navigate = useNavigate();

    // Valores iniciales del formulario
    const initialValues: [ComponentName]FormData = {
        // ... campos del formulario
    };

    // Configuraci√≥n del formulario
    const { register, handleSubmit, control, setValue, formState: { errors } } = useForm({
        defaultValues: initialValues
    });

    // Mutaci√≥n para operaciones CRUD
    const mutation = useMutation({
        mutationFn: [actionName],
        onError: (error: any) => {
            // Manejo de errores de Axios
            if (error.response?.data?.message) {
                if (Array.isArray(error.response.data.message)) {
                    error.response.data.message.forEach((msg: string) => {
                        toast.error(msg);
                    });
                } else {
                    toast.error(error.response.data.message);
                }
            } else {
                toast.error('Error al procesar la solicitud');
            }
        },
        onSuccess: () => {
            toast.success('Operaci√≥n realizada exitosamente');
            navigate("/[redirect-path]");
        }
    });

    // Query para obtener datos
    const { data, isLoading, error } = useQuery({
        queryKey: ['[queryKey]'],
        queryFn: [getDataFunction],
        retry: 2,
        staleTime: 5 * 60 * 1000, // 5 minutos
    });

    // Handler del formulario
    const handleForm = async (formData: [ComponentName]FormData) => {
        try {
            await mutation.mutateAsync(formData);
        } catch (error) {
            console.error('Error en el formulario:', error);
            return;
        }
    };

    return (
        <div className="container mx-auto">
            <div className="rounded-lg p-4">
                {/* Header */}
                <div>
                    <h1 className="text-4xl font-black text-gray-800">
                        [T√≠tulo de la Vista]
                    </h1>
                    <p className="text-xl font-light text-gray-500">
                        [Descripci√≥n de la vista]
                    </p>
                </div>

                {/* Contenido */}
                <div className="bg-gray-50 p-4 rounded-md">
                    <form 
                        className="mt-10 bg-white shadow-lg p-10 rounded-lg"
                        onSubmit={handleSubmit(handleForm)}
                        noValidate
                    >
                        <[ComponentName]Form
                            register={register}
                            control={control}
                            setValue={setValue}
                            errors={errors}
                        />

                        <input 
                            type="submit"
                            value="[Texto del bot√≥n]"
                            className="bg-blue-500 hover:bg-blue-600 w-full p-3 text-white uppercase font-bold cursor-pointer transition-colors"
                        />
                    </form>
                </div>
            </div>
        </div>
    );
}
```

### Para Componentes Reutilizables
```tsx
import { useState, useEffect } from 'react';
import { toast } from 'react-toastify';

interface [ComponentName]Props {
    // Definir props con tipos espec√≠ficos
    title: string;
    onAction?: (data: any) => void;
    isLoading?: boolean;
}

export const [ComponentName] = ({ 
    title, 
    onAction, 
    isLoading = false 
}: [ComponentName]Props) => {
    const [localState, setLocalState] = useState('');

    // Efectos
    useEffect(() => {
        // L√≥gica de efectos
    }, []);

    // Handlers
    const handleAction = () => {
        try {
            // L√≥gica del componente
            onAction?.(data);
        } catch (error) {
            toast.error('Error en la acci√≥n');
        }
    };

    return (
        <div className="[clases-tailwind]">
            {/* JSX del componente */}
        </div>
    );
};
```

## ÔøΩÔøΩ Reglas de Servicios

### Estructura de Service
```tsx
import { axiosInstance } from '../lib/axios';

export interface [Entity]Data {
    // Definir interface de datos
}

export const [actionName] = async (data: [Entity]Data): Promise<any> => {
    try {
        const response = await axiosInstance.[method]('/[endpoint]', data);
        return response.data;
    } catch (error) {
        throw error;
    }
};
```

## üé® Reglas de Estilos

### Clases Tailwind Preferidas
- **Contenedores**: `container mx-auto`, `max-w-7xl mx-auto`
- **Espaciado**: `p-4`, `m-4`, `space-y-4`, `gap-4`
- **Colores**: `bg-blue-500`, `text-gray-800`, `border-gray-200`
- **Estados**: `hover:bg-blue-600`, `focus:ring-2`, `disabled:opacity-50`
- **Responsive**: `sm:`, `md:`, `lg:`, `xl:`

### Componentes de UI Comunes
- **Botones**: `bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg`
- **Inputs**: `border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500`
- **Cards**: `bg-white shadow-lg rounded-lg p-6`
- **Loading**: `animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500`

## ‚ö° Mejores Pr√°cticas

### Performance
- ‚úÖ Usar `React.memo()` para componentes que se re-renderizan frecuentemente
- ‚úÖ Usar `useMemo()` y `useCallback()` cuando sea necesario
- ‚úÖ Implementar lazy loading para rutas

### Accesibilidad
- ‚úÖ **SIEMPRE** incluir `aria-label` en botones sin texto
- ‚úÖ **SIEMPRE** usar `alt` en im√°genes
- ‚úÖ **SIEMPRE** manejar navegaci√≥n por teclado


### C√≥digo Limpio
- ‚úÖ **SIEMPRE** usar TypeScript con tipos estrictos
- ‚úÖ **SIEMPRE** documentar props complejas
- ‚úÖ **SIEMPRE** seguir naming conventions consistentes
- ‚úÖ **SIEMPRE** usar destructuring para props

## ÔøΩÔøΩ Documentaci√≥n para Backend

### Cuando NO existe un service, crear documentaci√≥n `.md` con:

#### Estructura del archivo `backend-requirements-[serviceName].md`:
```markdown
# Backend Requirements: [ServiceName]

## üìã Descripci√≥n
Descripci√≥n detallada del servicio y su prop√≥sito.

## ÔøΩÔøΩÔ∏è Entidades

### [EntityName]
```typescript
interface [EntityName] {
    id: string;
    // ... otros campos
    createdAt: Date;
    updatedAt: Date;
}
```

## üîó Endpoints Requeridos

### 1. [GET] /api/[entity]/all
**Descripci√≥n:** Obtener todos los [entity]
**Headers:** 
- Authorization: Bearer {token}

**Response:**
```json
{
    "success": true,
    "data": [EntityName][],
    "message": "Lista obtenida exitosamente"
}
```

### 2. [GET] /api/[entity]/:id
**Descripci√≥n:** Obtener [entity] por ID
**Headers:** 
- Authorization: Bearer {token}

**Response:**
```json
{
    "success": true,
    "data": [EntityName],
    "message": "[Entity] obtenido exitosamente"
}
```

### 3. [POST] /api/[entity]
**Descripci√≥n:** Crear nuevo [entity]
**Headers:** 
- Authorization: Bearer {token}
- Content-Type: application/json

**Body:**
```json
{
    "field1": "value1",
    "field2": "value2"
}
```

**Response:**
```json
{
    "success": true,
    "data": [EntityName],
    "message": "[Entity] creado exitosamente"
}
```

### 4. [PUT] /api/[entity]/:id
**Descripci√≥n:** Actualizar [entity]
**Headers:** 
- Authorization: Bearer {token}
- Content-Type: application/json

**Body:**
```json
{
    "field1": "newValue1",
    "field2": "newValue2"
}
```

**Response:**
```json
{
    "success": true,
    "data": [EntityName],
    "message": "[Entity] actualizado exitosamente"
}
```

### 5. [DELETE] /api/[entity]/:id
**Descripci√≥n:** Eliminar [entity]
**Headers:** 
- Authorization: Bearer {token}

**Response:**
```json
{
    "success": true,
    "message": "[Entity] eliminado exitosamente"
}
```

## ÔøΩÔøΩ Validaciones

### Crear [Entity]
- [ ] Validar campos requeridos
- [ ] Validar tipos de datos
- [ ] Validar longitud de strings
- [ ] Validar formato de emails (si aplica)
- [ ] Validar unicidad (si aplica)

### Actualizar [Entity]
- [ ] Validar que el [entity] existe
- [ ] Validar permisos del usuario
- [ ] Validar campos requeridos
- [ ] Validar tipos de datos

### Eliminar [Entity]
- [ ] Validar que el [entity] existe
- [ ] Validar permisos del usuario
- [ ] Validar dependencias (si las hay)

## üö® C√≥digos de Error

### 400 - Bad Request
```json
{
    "success": false,
    "message": ["Error de validaci√≥n espec√≠fico"],
    "errors": {
        "field": ["Error espec√≠fico del campo"]
    }
}
```

### 401 - Unauthorized
```json
{
    "success": false,
    "message": "Token inv√°lido o expirado"
}
```

### 403 - Forbidden
```json
{
    "success": false,
    "message": "No tienes permisos para realizar esta acci√≥n"
}
```

### 404 - Not Found
```json
{
    "success": false,
    "message": "[Entity] no encontrado"
}
```

### 500 - Internal Server Error
```json
{
    "success": false,
    "message": "Error interno del servidor"
}
```

## üìù Notas para el Backend

### Middleware Requerido
- [ ] Validaci√≥n de JWT token
- [ ] Validaci√≥n de permisos por rol
- [ ] Rate limiting (si aplica)
- [ ] Logging de requests

### Base de Datos
- [ ] Crear tabla [entity]
- [ ] Crear √≠ndices necesarios
- [ ] Configurar relaciones (si las hay)
- [ ] Configurar soft delete (si aplica)



## üîÑ Estados del Frontend

### Loading States
- `isLoading: boolean` - Para operaciones generales
- `isCreating: boolean` - Para crear [entity]
- `isUpdating: boolean` - Para actualizar [entity]
- `isDeleting: boolean` - Para eliminar [entity]

### Error States
- `error: string | null` - Para errores generales
- `validationErrors: object` - Para errores de validaci√≥n espec√≠ficos

## üì± Componentes Frontend que Consumir√°n estos Endpoints

- `[ComponentName]View.tsx` - Vista principal
- `[ComponentName]Form.tsx` - Formulario de creaci√≥n/edici√≥n
- `[ComponentName]List.tsx` - Lista de [entity]
- `[ComponentName]Card.tsx` - Tarjeta individual de [entity]

---

**Fecha de Creaci√≥n:** [Fecha actual]
**Desarrollador Frontend:** [Nombre]
**Prioridad:** Alta/Media/Baja
**Estimaci√≥n Backend:** [X] d√≠as
```
```

**L√≠nea 243** - En la secci√≥n "## üö® Errores Comunes a Evitar", agregar:
```markdown
- ‚ùå **NO** crear componentes sin documentaci√≥n para el backend si no existe el service
```

## üìÑ Ejemplo de Documentaci√≥n para Chat

Como ejemplo, aqu√≠ tienes la documentaci√≥n que se crear√≠a para el componente ChatSupport:

```markdown
# Backend Requirements: ChatSupport

## üìã Descripci√≥n
Sistema de chat de soporte en tiempo real para que los usuarios puedan comunicarse con el equipo de soporte.

## üóÑÔ∏è Entidades

### ChatSession
```typescript
interface ChatSession {
    id: string;
    userId: string;
    status: 'active' | 'closed' | 'pending';
    createdAt: Date;
    lastMessageAt: Date;
    messages: ChatMessage[];
}
```

### ChatMessage
```typescript
interface ChatMessage {
    id: string;
    sessionId: string;
    message: string;
    sender: 'user' | 'support';
    timestamp: Date;
    isRead: boolean;
}
```

## ÔøΩÔøΩ Endpoints Requeridos

### 1. [GET] /api/chat/session/active
**Descripci√≥n:** Obtener sesi√≥n de chat activa del usuario
**Headers:** 
- Authorization: Bearer {token}

**Response:**
```json
{
    "success": true,
    "data": ChatSession | null,
    "message": "Sesi√≥n obtenida exitosamente"
}
```

### 2. [POST] /api/chat/session
**Descripci√≥n:** Crear nueva sesi√≥n de chat
**Headers:** 
- Authorization: Bearer {token}

**Response:**
```json
{
    "success": true,
    "data": ChatSession,
    "message": "Sesi√≥n creada exitosamente"
}
```

### 3. [GET] /api/chat/session/:id/messages
**Descripci√≥n:** Obtener mensajes de una sesi√≥n
**Headers:** 
- Authorization: Bearer {token}

**Response:**
```json
{
    "success": true,
    "data": ChatMessage[],
    "message": "Mensajes obtenidos exitosamente"
}
```

### 4. [POST] /api/chat/message
**Descripci√≥n:** Enviar mensaje
**Headers:** 
- Authorization: Bearer {token}
- Content-Type: application/json

**Body:**
```json
{
    "message": "Hola, necesito ayuda"
}
```

**Response:**
```json
{
    "success": true,
    "data": ChatMessage,
    "message": "Mensaje enviado exitosamente"
}
```

### 5. [PATCH] /api/chat/session/:id/close
**Descripci√≥n:** Cerrar sesi√≥n de chat
**Headers:** 
- Authorization: Bearer {token}

**Response:**
```json
{
    "success": true,
    "message": "Sesi√≥n cerrada exitosamente"
}
```

### 6. [PATCH] /api/chat/session/:id/mark-read
**Descripci√≥n:** Marcar mensajes como le√≠dos
**Headers:** 
- Authorization: Bearer {token}

**Response:**
```json
{
    "success": true,
    "message": "Mensajes marcados como le√≠dos"
}
```

## üìù Notas para el Backend

### Middleware Requerido
- [ ] Validaci√≥n de JWT token
- [ ] WebSocket para mensajes en tiempo real
- [ ] Rate limiting para evitar spam
- [ ] Logging de mensajes para auditor√≠a

### Base de Datos
- [ ] Crear tabla chat_sessions
- [ ] Crear tabla chat_messages
- [ ] Configurar √≠ndices por userId y sessionId
- [ ] Configurar relaciones entre tablas

---

**Fecha de Creaci√≥n:** 2024-12-19
**Desarrollador Frontend:** AI Assistant
**Prioridad:** Alta
**Estimaci√≥n Backend:** 3-5 d√≠as
```

Con esta actualizaci√≥n, cada vez que crees un componente que requiera un servicio que no existe, autom√°ticamente se generar√° la documentaci√≥n completa para el equipo de backend con todos los endpoints, validaciones, tipos de datos y especificaciones necesarias.

## üö® Errores Comunes a Evitar

- ‚ùå **NO** usar `any` como tipo
- ‚ùå **NO** hacer llamadas directas a API sin usar services
- ‚ùå **NO** manejar estado global con useState
- ‚ùå **NO** olvidar manejar estados de loading y error
- ‚ùå **NO** usar clases CSS personalizadas cuando Tailwind puede hacerlo
- ‚ùå **NO** crear componentes sin interfaces TypeScript

## üìö Recursos Adicionales

- [TanStack Query Docs](https://tanstack.com/query/latest)
- [React Hook Form Docs](https://react-hook-form.com/)
- [Zustand Docs](https://github.com/pmndrs/zustand)
- [Tailwind CSS Docs](https://tailwindcss.com/docs)